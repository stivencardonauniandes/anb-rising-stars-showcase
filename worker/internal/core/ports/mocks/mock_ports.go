// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alejandro/video-worker/internal/core/ports (interfaces: MessageQueue,Storage,VideoRepository,Metrics,VideoProcessor)
//
// Generated by this command:
//
//	mockgen -destination=internal/core/ports/mocks/mock_ports.go -package=mocks github.com/alejandro/video-worker/internal/core/ports MessageQueue,Storage,VideoRepository,Metrics,VideoProcessor
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	domain "github.com/alejandro/video-worker/internal/core/domain"
	ports "github.com/alejandro/video-worker/internal/core/ports"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageQueue is a mock of MessageQueue interface.
type MockMessageQueue struct {
	ctrl     *gomock.Controller
	recorder *MockMessageQueueMockRecorder
	isgomock struct{}
}

// MockMessageQueueMockRecorder is the mock recorder for MockMessageQueue.
type MockMessageQueueMockRecorder struct {
	mock *MockMessageQueue
}

// NewMockMessageQueue creates a new mock instance.
func NewMockMessageQueue(ctrl *gomock.Controller) *MockMessageQueue {
	mock := &MockMessageQueue{ctrl: ctrl}
	mock.recorder = &MockMessageQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageQueue) EXPECT() *MockMessageQueueMockRecorder {
	return m.recorder
}

// Ack mocks base method.
func (m *MockMessageQueue) Ack(ctx context.Context, msg *ports.QueueMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ack", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ack indicates an expected call of Ack.
func (mr *MockMessageQueueMockRecorder) Ack(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockMessageQueue)(nil).Ack), ctx, msg)
}

// Fetch mocks base method.
func (m *MockMessageQueue) Fetch(ctx context.Context) (*ports.QueueMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx)
	ret0, _ := ret[0].(*ports.QueueMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockMessageQueueMockRecorder) Fetch(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockMessageQueue)(nil).Fetch), ctx)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Download mocks base method.
func (m *MockStorage) Download(ctx context.Context, remotePath string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", ctx, remotePath)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockStorageMockRecorder) Download(ctx, remotePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockStorage)(nil).Download), ctx, remotePath)
}

// Upload mocks base method.
func (m *MockStorage) Upload(ctx context.Context, remotePath string, data io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, remotePath, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockStorageMockRecorder) Upload(ctx, remotePath, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockStorage)(nil).Upload), ctx, remotePath, data)
}

// MockVideoRepository is a mock of VideoRepository interface.
type MockVideoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVideoRepositoryMockRecorder
	isgomock struct{}
}

// MockVideoRepositoryMockRecorder is the mock recorder for MockVideoRepository.
type MockVideoRepositoryMockRecorder struct {
	mock *MockVideoRepository
}

// NewMockVideoRepository creates a new mock instance.
func NewMockVideoRepository(ctrl *gomock.Controller) *MockVideoRepository {
	mock := &MockVideoRepository{ctrl: ctrl}
	mock.recorder = &MockVideoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoRepository) EXPECT() *MockVideoRepositoryMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockVideoRepository) FindByID(ctx context.Context, id string) (*domain.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*domain.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockVideoRepositoryMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockVideoRepository)(nil).FindByID), ctx, id)
}

// Update mocks base method.
func (m *MockVideoRepository) Update(ctx context.Context, video *domain.Video) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, video)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockVideoRepositoryMockRecorder) Update(ctx, video any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVideoRepository)(nil).Update), ctx, video)
}

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
	isgomock struct{}
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// IncQueueError mocks base method.
func (m *MockMetrics) IncQueueError() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncQueueError")
}

// IncQueueError indicates an expected call of IncQueueError.
func (mr *MockMetricsMockRecorder) IncQueueError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncQueueError", reflect.TypeOf((*MockMetrics)(nil).IncQueueError))
}

// IncTaskProcessed mocks base method.
func (m *MockMetrics) IncTaskProcessed(status string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncTaskProcessed", status)
}

// IncTaskProcessed indicates an expected call of IncTaskProcessed.
func (mr *MockMetricsMockRecorder) IncTaskProcessed(status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncTaskProcessed", reflect.TypeOf((*MockMetrics)(nil).IncTaskProcessed), status)
}

// ObserveProcessingDuration mocks base method.
func (m *MockMetrics) ObserveProcessingDuration(status string, d time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveProcessingDuration", status, d)
}

// ObserveProcessingDuration indicates an expected call of ObserveProcessingDuration.
func (mr *MockMetricsMockRecorder) ObserveProcessingDuration(status, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveProcessingDuration", reflect.TypeOf((*MockMetrics)(nil).ObserveProcessingDuration), status, d)
}

// MockVideoProcessor is a mock of VideoProcessor interface.
type MockVideoProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockVideoProcessorMockRecorder
	isgomock struct{}
}

// MockVideoProcessorMockRecorder is the mock recorder for MockVideoProcessor.
type MockVideoProcessorMockRecorder struct {
	mock *MockVideoProcessor
}

// NewMockVideoProcessor creates a new mock instance.
func NewMockVideoProcessor(ctrl *gomock.Controller) *MockVideoProcessor {
	mock := &MockVideoProcessor{ctrl: ctrl}
	mock.recorder = &MockVideoProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoProcessor) EXPECT() *MockVideoProcessorMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockVideoProcessor) Process(ctx context.Context, input io.Reader, opts ports.VideoProcessingOptions) (*ports.ProcessedVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, input, opts)
	ret0, _ := ret[0].(*ports.ProcessedVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockVideoProcessorMockRecorder) Process(ctx, input, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockVideoProcessor)(nil).Process), ctx, input, opts)
}
