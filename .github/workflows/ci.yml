name: CI - Tests and Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Run Tests and Generate Coverage
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: anb_showcase_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "✅ Dependencies installed"

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/anb_showcase_test" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV

    - name: Run database migrations
      working-directory: ./api
      run: |
        alembic upgrade head

    - name: Run comprehensive test suite with coverage
      working-directory: ./api
      run: |
        echo "🧪 Starting comprehensive test execution..."
        echo "📊 Test Configuration:"
        echo "  • Total test files: $(find tests/ -name 'test_*.py' | wc -l)"
        echo "  • Python version: $(python --version)"
        echo "  • Pytest version: $(python -m pytest --version)"
        echo ""
        
        # Run all tests with coverage, parallel execution, and detailed reporting
        coverage run -m pytest \
          tests/ \
          -v \
          --tb=short \
          --maxfail=0 \
          --durations=10 \
          --strict-markers \
          --disable-warnings \
          --junitxml=pytest-report.xml \
          || (echo "❌ Some tests failed" && exit 1)
        
        echo ""
        echo "📈 Generating coverage reports..."
        coverage report --skip-covered --show-missing
        coverage xml -o coverage.xml
        coverage html -d htmlcov
        
        echo ""
        echo "✅ All tests completed successfully!"
        echo "📊 Test Results Summary:"
        echo "  • JUnit Report: pytest-report.xml"
        echo "  • Coverage XML: coverage.xml" 
        echo "  • Coverage HTML: htmlcov/"

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          api/coverage.xml
          api/htmlcov/
        retention-days: 30

    - name: Display coverage summary
      working-directory: ./api
      run: |
        echo "## 📊 Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        coverage report >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      working-directory: ./api
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit

    - name: Run Black (Code Formatting)
      working-directory: ./api
      run: |
        black --check --diff .
      continue-on-error: true

    - name: Run isort (Import Sorting)
      working-directory: ./api
      run: |
        isort --check-only --diff .
      continue-on-error: true

    - name: Run Flake8 (Linting)
      working-directory: ./api
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

    - name: Run Bandit (Security Analysis)
      working-directory: ./api
      run: |
        bandit -r . -f json -o bandit-report.json
        bandit -r . --severity-level medium
      continue-on-error: true

    - name: Upload lint reports
      uses: actions/upload-artifact@v4
      with:
        name: lint-reports
        path: |
          api/bandit-report.json
        retention-days: 30
      if: always()

  docker-test:
    name: Docker Integration Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build API Docker image
      run: |
        docker build -t anb-api:test ./api

    - name: Run Docker Compose for testing
      run: |
        cp docker-compose.yml docker-compose.test.yml
        # Override for testing
        echo "  api:" >> docker-compose.test.yml
        echo "    image: anb-api:test" >> docker-compose.test.yml
        echo "    environment:" >> docker-compose.test.yml
        echo "      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/anb_showcase" >> docker-compose.test.yml
        echo "      - REDIS_URL=redis://redis:6379/0" >> docker-compose.test.yml
        echo "      - SECRET_KEY=test-secret-key" >> docker-compose.test.yml
        
        docker-compose -f docker-compose.test.yml up -d postgres redis
        sleep 10
        docker-compose -f docker-compose.test.yml up --exit-code-from api api

    - name: Clean up
      run: |
        docker-compose -f docker-compose.test.yml down
      if: always()

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install safety
      run: |
        python -m pip install --upgrade pip
        pip install safety

    - name: Run safety check
      working-directory: ./api
      run: |
        safety check -r requirements.txt --json --output safety-report.json
        safety check -r requirements.txt
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          api/safety-report.json
        retention-days: 30
      if: always()

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, lint, docker-test, security-scan]
    if: always()
    
    steps:
    - name: Create Status Summary
      run: |
        echo "## 🚀 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Tests & Coverage | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.lint.result == 'success' && '✅ Passed' || '⚠️ Issues Found' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Integration | ${{ needs.docker-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '⚠️ Vulnerabilities Found' }} |" >> $GITHUB_STEP_SUMMARY
