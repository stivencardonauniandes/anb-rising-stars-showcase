name: Release and Deploy

on:
  push:
    tags:
      - 'v*.*.*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: anb_showcase_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      working-directory: ./api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest-cov

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/anb_showcase_test" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-release" >> $GITHUB_ENV

    - name: Run database migrations
      working-directory: ./api
      run: |
        alembic upgrade head

    - name: Run comprehensive test suite for release
      working-directory: ./api
      run: |
        echo "🧪 Running complete test suite for release validation..."
        echo "📋 Release Test Configuration:"
        echo "  • Coverage threshold: 80%"
        echo "  • Test mode: Comprehensive"
        echo "  • Fail on first error: No"
        echo ""
        
        coverage run -m pytest \
          tests/ \
          -v \
          --tb=short \
          --maxfail=0 \
          --durations=10 \
          --strict-markers \
          --junitxml=pytest-report.xml \
          || (echo "❌ Tests failed - Release blocked" && exit 1)
        
        echo ""
        echo "📊 Validating coverage threshold..."
        coverage report --fail-under=80 --show-missing
        coverage html
        
        echo ""
        echo "✅ Release validation completed successfully!"

    - name: Upload coverage for release
      uses: actions/upload-artifact@v4
      with:
        name: release-coverage-${{ github.sha }}
        path: api/htmlcov/
        retention-days: 90

  build-docker:
    name: Build and Test Docker Images
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract version
      id: extract_version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Build API Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./api
        platforms: linux/amd64,linux/arm64
        push: false
        tags: |
          anb-api:${{ steps.extract_version.outputs.VERSION }}
          anb-api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm --name anb-api-test \
          -e DATABASE_URL=sqlite:///./test.db \
          -e REDIS_URL=redis://localhost:6379/0 \
          -e SECRET_KEY=test-secret-key \
          anb-api:${{ steps.extract_version.outputs.VERSION }} \
          python -c "import main; print('✅ API imports successfully')"

    - name: Save Docker image
      run: |
        docker save anb-api:${{ steps.extract_version.outputs.VERSION }} | gzip > anb-api-${{ steps.extract_version.outputs.VERSION }}.tar.gz

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image-${{ steps.extract_version.outputs.VERSION }}
        path: anb-api-${{ steps.extract_version.outputs.VERSION }}.tar.gz
        retention-days: 30

  security-audit:
    name: Security Audit for Release
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install security tools
      working-directory: ./api
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep

    - name: Run safety check
      working-directory: ./api
      run: |
        safety check -r requirements.txt --full-report

    - name: Run bandit security analysis
      working-directory: ./api
      run: |
        bandit -r . -x tests/,alembic/ -ll

    - name: Run semgrep security scan
      working-directory: ./api
      run: |
        semgrep --config=auto . --error --no-git-ignore
      continue-on-error: true

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-docker, security-audit]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## What's Changed" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          🚀 **ANB Rising Stars Showcase ${{ github.ref_name }}**
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## 📊 Quality Metrics
          - ✅ All tests passing
          - ✅ Security audit passed
          - ✅ Docker images built and tested
          
          ## 🐳 Docker Images
          - `anb-api:${{ github.ref_name }}`
          - `anb-api:latest`
          
          ## 📋 Installation
          ```bash
          # Pull the latest version
          docker pull ghcr.io/your-org/anb-api:${{ github.ref_name }}
          
          # Or use docker compose
          docker compose up --build
          ```
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

  notify-release:
    name: Notify Release Results
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.create-release.result == 'success'
      run: |
        echo "## 🎉 Release ${{ github.ref_name }} Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ All tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Security audit completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Docker images built" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ GitHub release created" >> $GITHUB_STEP_SUMMARY

    - name: Notify Failure
      if: needs.create-release.result == 'failure'
      run: |
        echo "## ❌ Release ${{ github.ref_name }} Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
